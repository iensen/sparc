/* Generated By:JJTree: Do not edit this line. ASToptimize_statement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;

import java.util.HashMap;

public
class ASToptimize_statement extends SimpleNode {
  public ASToptimize_statement(int id) {
    super(id);
  }

  public ASToptimize_statement(SparcTranslator p, int id) {
    super(p, id);
  }
  
    /** Accept the visitor. **/
  public Object jjtAccept(SparcTranslatorVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
  
  public String toString(HashMap<String,String> sortRenaming) {
	  StringBuilder result = new StringBuilder();
          result.append(this.image);
          for (int i = 0; i < this.jjtGetNumChildren(); i++) {
            if (((SimpleNode) this.jjtGetChild(i)).getId() == SparcTranslatorTreeConstants.JJTOPTIMIZEPARAMETERLIST) {
                result.append(((ASToptimizeParameterList)this.jjtGetChild(i)).toString(sortRenaming));
            }
          }
          result.append(":");
          for (int i = 0; i < this.jjtGetNumChildren(); i++) {
            if (((SimpleNode) this.jjtGetChild(i)).getId() == SparcTranslatorTreeConstants.JJTNONRELATOMLIST) {
                result.append(((ASTnonRelAtomList)this.jjtGetChild(i)).toString());
            }
          }
	  result.append("}.");
	  return result.toString();
  }

}
/* JavaCC - OriginalChecksum=2f8a0b0ac8798e8149f25cd0e895fbc5 (do not edit this line) */
